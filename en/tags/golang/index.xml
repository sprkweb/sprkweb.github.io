<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on Vadim Saprykin</title><link>https://www.sprkweb.dev/en/tags/golang/</link><description>Recent content in Golang on Vadim Saprykin</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 29 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.sprkweb.dev/en/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>How to make Go, WebAssembly and TypeScript work together</title><link>https://www.sprkweb.dev/en/posts/go-wasm-with-typescript/</link><pubDate>Wed, 29 Nov 2023 00:00:00 +0000</pubDate><guid>https://www.sprkweb.dev/en/posts/go-wasm-with-typescript/</guid><description>&lt;p>Recently in one &lt;a href="https://github.com/sprkweb/finaplan-web/tree/fab272594212a8c390a57f4ff5aede30489c9f05" target="_blank" rel="noreferrer">of my pet projects&lt;/a> I added Go code compiled in WebAssembly (&lt;em>WASM&lt;/em>) for client-side execution. The interface is made with Svelte with TypeScript, and the logic is implemented in Golang. As a result, I got an interesting experience that I want to share: how to make Go, WebAssembly and TypeScript work together.&lt;/p></description></item><item><title>Maybe what you need is not floating-point numbers</title><link>https://www.sprkweb.dev/en/posts/floating-point-numbers/</link><pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate><guid>https://www.sprkweb.dev/en/posts/floating-point-numbers/</guid><description>&lt;p>There are many features in programming languages that are prone to problems and should be used with caution. One of the most famous examples is the goto operator. Floating-point numbers should also be considered as such features.&lt;/p></description></item></channel></rss>